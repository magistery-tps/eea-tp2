# launch_shinystan(bayesion_model, rstudio = FALSE)
print('Lineal coeficients:')
lineal_model$coefficients
print('Bayesiona coeficients:')
for(param in params) print(get_posterior_mean(bayesion_model, par=param))
models_validation(lineal_model, bayesion_predictor, params, vars, test_set)
models_validation <- function(lineal_model, bayesion_model, params, vars, test_set) {
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
data.frame(
model = c('Lineal Regression', 'Bayesian Regression'),
rmse = c(
rmse(test_true, bayesion_test_pred),
rmse(test_true, lineal_test_pred)
),
mae = c(
mae(test_true, bayesion_test_pred),
mae(test_true, lineal_test_pred)
)
) %>% arrange(mae)
}
gc()
gc()
set.seed(42)
options(mc.cores = 24)
# install.packages(pacman)
# install.packages("https://cran.r-project.org/src/contrib/rstan_2.21.2.tar.gz",repos = NULL,type="source")
# sudo apt-get install libglpk-dev
library(pacman)
p_load(tidyverse, tidymodels, rsample, rstan, shinystan, rstanarm, devtools)
source('../src/dataset.R')
source('../src/plot.R')
source('../src/model.R')
dataset <- load_dataset() %>% mutate_if(is.character, as.factor)
dataset %>% glimpse()
missings_summary(dataset)
hist_plots(dataset)
box_plots(dataset)
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_depth_mm')
outliers(dataset, column='flipper_length_mm')
outliers(dataset, column='body_mass_g')
outliers(dataset, column='year')
bar_plots(dataset)
dataset <- dataset %>% drop_na()
missings_summary(dataset)
corr_plot(dataset %>% dplyr::select(-year))
segmented_pairs_plot(dataset, segment_column='species')
train_test <- train_test_split(dataset, train_size = 0.7, shuffle = TRUE)
train_set <- train_test[[1]]
test_set  <- train_test[[2]]
lineal_model_1 <- lm(
body_mass_g ~ bill_length_mm + bill_depth_mm + flipper_length_mm,
data = train_set
)
summary(lineal_model_1)
lineal_model_1 <- lm(body_mass_g ~ flipper_length_mm, data = train_set)
summary(lineal_model_1)
bayesion_model_1 <- stan(
model_code =  "
data {
int<lower=1>               obs_count;
vector<lower=1>[obs_count] x;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real<lower=0> sigma;
}
model {
// Distribuciones a priori (Fijado por el investigador)
beta0 ~ normal(0, 8000);  // Intercept
beta1 ~ normal(0, 100);   // flipper_length_mm
sigma ~ exponential(0.1); // Varianza
// Likelihood
y ~ normal(beta0 + beta1 * x, sigma);
}
",
data = list(
obs_count = nrow(train_set),
x         = colvalues(train_set, 'flipper_length_mm'),
y         = colvalues(train_set, 'body_mass_g')
),
chains = 3,
iter   = 300,
warmup = 180,
thin   = 1
)
params_1 <- c('beta0', 'beta1', 'sigma')
traceplot(bayesion_model_1, pars = params_1, inc_warmup = TRUE)
lm_vs_br_coeficients(lineal_model_1, bayesion_model_1, params_1)
vars_1 <- c('flipper_length_mm')
lm_vs_br_models_validation(lineal_model_1, bayesion_model_1, params_1, vars_1, test_set)
bayesion_predictor_1 <- BayesianRegressionPredictor.from(bayesion_model_1, params_1, vars_1)
plot_compare_fit(
lineal_model_1,
bayesion_predictor_1,
train_set,
label_1 = 'Regresion Lineal',
label_2 = 'Regresion Bayesiana'
)
lineal_model_2 <- lm(
body_mass_g
~ bill_length_mm
+ bill_depth_mm
+ flipper_length_mm
+ sex,
data = train_set
)
summary(lineal_model_2)
lineal_model_2 <- lm(
body_mass_g
~ bill_depth_mm
+ flipper_length_mm
+ sex,
data = train_set
)
summary(lineal_model_2)
to_model_input <- function(df) {
model.matrix(
body_mass_g
~ bill_depth_mm
+ flipper_length_mm
+ sex,
data = df
)
}
train_X <- train_set %>% to_model_input()
test_X  <- test_set %>% to_model_input()
head(train_X)
bayesion_model_2 <- stan(
model_code = "
data {
int<lower=1>                 obs_count;
int<lower=1>                 coef_count;
matrix[obs_count,coef_count] X;
vector[obs_count]            y;
}
parameters {
vector[coef_count]  beta;
real<lower=0>       sigma;
}
model {
// Distribuciones a priori
beta[1] ~ normal(0, 3000); // Intecept = beta0 + sexfemale
beta[2] ~ normal(0, 200);  // bill_depth_mm
beta[3] ~ normal(0, 200);  // flipper_length_mm
beta[4] ~ normal(0, 600);  // sexmale
sigma ~ exponential(0.1);  // Varianza
// Likelihood
y ~ normal(X * beta, sigma);
}
",
data = list(
obs_count  = dim(train_X)[1],
coef_count = dim(train_X)[2],
y          = colvalues(train_set, 'body_mass_g'),
X          = train_X
),
chains = 3,
iter   = 4000,
warmup = 500,
thin   = 1
)
params_2 <- c('beta[1]', 'beta[2]', 'beta[3]', 'beta[4]', 'sigma')
traceplot(bayesion_model_2, inc_warmup = TRUE, pars = params_2)
lineal_model_2$coefficients
br_coeficients(bayesion_model_2, params_2)
vars_2 <- c('bill_depth_mm', 'flipper_length_mm', 'sexmale')
lm_vs_br_models_validation(
lineal_model_2,
bayesion_model_2,
params_2,
vars_2,
test_set,
as.data.frame(test_X)
)
bayesion_predictor_2 <- BayesianRegressionPredictor.from(bayesion_model_2, params_2, vars_2)
plot_compare_fit(
lineal_model_2,
bayesion_predictor_2,
test_set,
as.data.frame(test_X),
label_1 = 'Regresion Lineal',
label_2 = 'Regresion Bayesiana'
)
plot_data(train_set)
train_set_with_outliers <- train_set %>%
mutate(flipper_length_mm = ifelse(
body_mass_g > 5400 & body_mass_g < 5700,
flipper_length_mm + (flipper_length_mm * runif(1, 0.1, 0.2)),
flipper_length_mm
))
plot_data(train_set_with_outliers)
lineal_model_3 <- lm(
body_mass_g ~ flipper_length_mm,
data = train_set_with_outliers
)
summary(lineal_model_3)
plot_compare_fit(
lineal_model_1,
lineal_model_3,
train_set_with_outliers,
label_1='Regresi贸n Lineal SIN outliers',
label_2='Regresi贸n Lineal CON outliters'
)
robust_lineal_model_3 <- rlm(
body_mass_g ~ flipper_length_mm,
data = train_set_with_outliers
)
plot_compare_fit(
lineal_model_1,
robust_lineal_model_3,
train_set_with_outliers,
label_1='Regresi贸n Lineal SIN outliers',
label_2='Regresi贸n Lineal Robusta CON outliters'
)
lm_vs_lm_models_validation(lineal_model_3, robust_lineal_model_3, train_set_with_outliers)
lm_vs_lm_models_validation(lineal_model_3, robust_lineal_model_3, test_set)
bayesion_model_3 <- stan(
model_code =  "
data {
int<lower=1>               obs_count;
vector<lower=1>[obs_count] x;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real<lower=0> sigma;
}
model {
// Distribuciones a priori (Fijado por el investigador)
beta0 ~ normal(0, 1000);  // Intercept
beta1 ~ normal(0, 100);   // flipper_length_mm
sigma ~ exponential(0.1); // Varianza
// Likelihood
y ~ normal(beta0 + beta1 * x, sigma);
}
",
data = list(
obs_count = nrow(train_set_with_outliers),
x = colvalues(train_set_with_outliers, 'flipper_length_mm'),
y = colvalues(train_set_with_outliers, 'body_mass_g')
),
chains = 3,
iter   = 1000,
warmup = 300,
thin   = 1
)
params_3 <- c('beta0', 'beta1', 'sigma')
traceplot(bayesion_model_3, pars = params_3, inc_warmup = TRUE)
lm_vs_br_coeficients(robust_lineal_model_3, bayesion_model_3, params_3)
vars_3 <- c('flipper_length_mm')
lm_vs_br_models_validation(robust_lineal_model_3, bayesion_model_3, params_3, vars_3, test_set)
bayesion_predictor_3 <- BayesianRegressionPredictor.from(bayesion_model_3, params_3, vars_3)
plot_compare_fit(
robust_lineal_model_3,
bayesion_predictor_3,
train_set,
label_1='Regresion Lineal Robusta CON outliers',
label_2='Regresion Bayesiana CON outliers'
)
bayesion_model_3.1 <- stan(
model_code =  "
data {
int<lower=1>               obs_count;
vector<lower=1>[obs_count] x;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real<lower=0> sigma;
}
model {
// Distribuciones a priori (Fijado por el investigador)
beta0 ~ normal(-5700, 50);  // Intercept (Muy informativa!!!)
beta1 ~ normal(49, 20);      // flipper_length_mm (Muy informativa!!!)
sigma ~ exponential(0.1); // Varianza
// Likelihood
y ~ student_t(2, beta0 + beta1 * x, sigma);
}
",
data = list(
obs_count = nrow(train_set_with_outliers),
x = colvalues(train_set_with_outliers, 'flipper_length_mm'),
y = colvalues(train_set_with_outliers, 'body_mass_g')
),
chains = 3,
iter   = 1000,
warmup = 300,
thin   = 1
)
params_3 <- c('beta0', 'beta1', 'sigma')
traceplot(bayesion_model_3.1, pars = params_3, inc_warmup = TRUE)
lm_vs_br_coeficients(lineal_model_1, bayesion_model_3.1, params_3)
vars_3 <- c('flipper_length_mm')
lm_vs_br_models_validation(lineal_model_1, bayesion_model_3.1, params_3, vars_3, test_set)
bayesion_predictor_3.1 <- BayesianRegressionPredictor.from(bayesion_model_3.1, params_3, vars_3)
plot_compare_fit(
lineal_model_1,
bayesion_predictor_3.1,
train_set_with_outliers,
label_1='Regresion Lineal SIN outliers',
label_2='Regresion Bayesiana CON outliers'
)
train_test <- train_test_split(dataset, train_size = 0.05, shuffle = TRUE)
train_set_4 <- train_test[[1]]
test_set_4  <- train_test[[2]]
plot_data(train_set_4)
lineal_model_4 <- lm(
body_mass_g ~ flipper_length_mm,
data = train_set_4
)
bayesion_model_4 <- stan(
model_code =  "
data {
int<lower=1>               obs_count;
vector<lower=1>[obs_count] x;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real<lower=0> sigma;
}
model {
// Distribuciones a priori
beta0 ~ normal(0, 8000); // Intercept
beta1 ~ normal(0, 100);
sigma ~ exponential(0.1);
// Likelihood
y ~ normal(beta0 + beta1 * x, sigma);
}
",
data = list(
obs_count = nrow(train_set_4),
x = colvalues(train_set_4, 'flipper_length_mm'),
y  = colvalues(train_set_4, 'body_mass_g')
),
chains = 3,
iter   = 300,
warmup = 180,
thin   = 1
)
params_4 <- c('beta0', 'beta1', 'sigma')
traceplot(bayesion_model_4, pars = params_4, inc_warmup = TRUE)
lineal_model_4$coefficients
for(param in params_4) print(get_posterior_mean(bayesion_model_4, par=param)[4])
vars_4 <- c('flipper_length_mm')
lm_vs_br_models_validation(lineal_model_4, bayesion_model_4, params_4, vars_4, test_set)
bayesion_predictor_4 <- BayesianRegressionPredictor.from(bayesion_model_4, params_4, vars_4)
plot_compare_fit(
lineal_model_4,
bayesion_predictor_4,
train_set,
label_1='Regresion Lineal',
label_2='Regresion Bayesiana'
)
bayesion_model_5a <- stan(
model_code =  "
data {
int<lower=1>               obs_count;
vector<lower=1>[obs_count] x;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real<lower=0> sigma;
}
model {
// Distribuciones a priori
beta0 ~ uniform(-6000, 2000); // Intercept
beta1 ~ uniform(-50, 50);
sigma ~ exponential(0.5);
// Likelihood
y ~ normal(beta0 + beta1 * x, sigma);
}
",
data = list(
obs_count = nrow(train_set),
x = colvalues(train_set, 'flipper_length_mm'),
y  = colvalues(train_set, 'body_mass_g')
),
chains = 3,
iter   = 2000,
warmup = 300,
thin   = 1
)
params_5a <- c('beta0', 'beta1', 'sigma')
traceplot(bayesion_model_5a, pars = params_5a, inc_warmup = TRUE)
br_vs_br_coeficients(bayesion_model_1, bayesion_model_5a, params_5a)
lm_vs_br_models_validation(lineal_model_1, bayesion_model_5a, params_1, vars_1, test_set)
vars_5a <- c('flipper_length_mm')
lm_vs_br_models_validation(bayesion_model_1, bayesion_model_5a, params_5a, vars_5a, test_set)
vars_5a <- c('flipper_length_mm')
lm_vs_br_models_validation(lineal_model_1, bayesion_model_5a, params_5a, vars_5a, test_set)
bayesion_model_5b <- stan(
model_code =  "
data {
int<lower=1>               obs_count;
vector<lower=1>[obs_count] x;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real<lower=0> sigma;
}
model {
// Distribuciones a priori
beta0 ~ normal(-5000, 100); // Intercept
beta1 ~ normal(50, 5);
sigma ~ exponential(0.5);
// Likelihood
y ~ normal(beta0 + beta1 * x, sigma);
}
",
data = list(
obs_count = nrow(train_set),
x = colvalues(train_set, 'flipper_length_mm'),
y  = colvalues(train_set, 'body_mass_g')
),
chains = 3,
iter   = 2000,
warmup = 300,
thin   = 1
)
params_5b <- c('beta0', 'beta1', 'sigma')
traceplot(bayesion_model_5b, pars = params_5b, inc_warmup = TRUE)
br_vs_br_coeficients(bayesion_model_5a, bayesion_model_5b,params_5a)
vars_5b <- c('flipper_length_mm')
lm_vs_br_models_validation(lineal_model_1, bayesion_model_5b, params_5b, vars_5b, test_set)
bayesion_predictor_5b <- BayesianRegressionPredictor.from(bayesion_model_5b, params_5b, vars_5b)
plot_compare_fit(
bayesion_predictor_5a,
bayesion_predictor_5b,
train_set,
label_1='Regresion Bayesiana con dist menos informativa (uniforme)',
label_2='Regresion Bayesiana con dist muy informativa'
)
bayesion_predictor_5a <- BayesianRegressionPredictor.from(bayesion_model_5a, params_5a, vars_5a)
bayesion_predictor_5b <- BayesianRegressionPredictor.from(bayesion_model_5b, params_5b, vars_5b)
plot_compare_fit(
bayesion_predictor_5a,
bayesion_predictor_5b,
train_set,
label_1='Regresion Bayesiana con dist menos informativa (uniforme)',
label_2='Regresion Bayesiana con dist muy informativa'
)
library(patchwork)
p1<-ggplot(dataset, aes(y=bill_depth_mm)) +
geom_boxplot(fill="coral") + ggtitle("bill_depth") + theme(plot.title = element_text(hjust = 0.5))
p2<-ggplot(dataset, aes(y=bill_length_mm)) +
geom_boxplot(fill="dodgerblue") + ggtitle("bill_length") + theme(plot.title = element_text(hjust = 0.5))
p3<-ggplot(dataset, aes(y=flipper_length_mm)) +
geom_boxplot(fill="seagreen3")+ ggtitle("flipper_depth") + theme(plot.title = element_text(hjust = 0.5))
p4<-ggplot(dataset, aes(y=body_mass_g)) +
geom_boxplot(fill = "pink1") + ggtitle("body_mass") + theme(plot.title = element_text(hjust = 0.5))
p1 + p2 + p3 + p4
bayesion_predictor_4 <- BayesianRegressionPredictor.from(bayesion_model_4, params_4, vars_4)
plot_compare_fit(
lineal_model_4,
bayesion_predictor_4,
train_set_4,
label_1='Regresion Lineal',
label_2='Regresion Bayesiana'
)
bayesion_model_4 <- stan(
model_code =  "
data {
int<lower=1>               obs_count;
vector<lower=1>[obs_count] x;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real<lower=0> sigma;
}
model {
// Distribuciones a priori
beta0 ~ normal(0, 8000); // Intercept
beta1 ~ normal(0, 100);
sigma ~ exponential(0.1);
// Likelihood
y ~ normal(beta0 + beta1 * x, sigma);
}
",
data = list(
obs_count = nrow(train_set_4),
x = colvalues(train_set_4, 'flipper_length_mm'),
y  = colvalues(train_set_4, 'body_mass_g')
),
chains = 3,
iter   = 1000,
warmup = 180,
thin   = 1
)
params_4 <- c('beta0', 'beta1', 'sigma')
traceplot(bayesion_model_4, pars = params_4, inc_warmup = TRUE)
lineal_model_4$coefficients
for(param in params_4) print(get_posterior_mean(bayesion_model_4, par=param)[4])
for(param in params_4) print(get_posterior_mean(bayesion_model_4, par=param)[4])
vars_4 <- c('flipper_length_mm')
lm_vs_br_models_validation(lineal_model_4, bayesion_model_4, params_4, vars_4, test_set)
