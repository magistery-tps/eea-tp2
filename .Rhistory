obs_count = train_set %>% nrow(),
y         = train_set %>% dplyr::select(body_mass_g) %>% pull(),
x1        = train_set %>% dplyr::select(bill_length_mm) %>% pull(),
x2        = train_set %>% dplyr::select(bill_depth_mm) %>% pull(),
x3        = train_set %>% dplyr::select(flipper_length_mm) %>% pull()
)
model_definition <- "
data {
int<lower=0>               obs_count;
vector<lower=0>[obs_count] x1;
vector<lower=0>[obs_count] x2;
vector<lower=0>[obs_count] x3;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real          beta2;
real          beta3;
real<lower=0> sigma;
}
model {
beta0 ~ normal(0, 6000);
beta1 ~ normal(0, 10);
beta2 ~ normal(0, 10);
beta3 ~ normal(0, 50);
sigma ~ exponential(0.1);
y ~ normal(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x3, sigma);
}"
bayesion_model <- stan(
model_code = model_definition,
data       = model_variables,
chains     = 5,
iter       = 4000,
warmup     = 1000,
thin       = 1,
seed       = 42
)
traceplot(bayesion_model, pars = params, inc_warmup = TRUE)
lineal_model$coefficients
for(param in params)
print(get_posterior_mean(bayesion_model, par=param))
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
rmse(test_true, bayesion_test_pred)
rmse(test_true, lineal_test_pred)
mae(test_true, bayesion_test_pred)
mae(test_true, lineal_test_pred)
options(mc.cores = 24)
model_variables <- list(
obs_count = train_set %>% nrow(),
y         = train_set %>% dplyr::select(body_mass_g)       %>% pull(),
x1        = train_set %>% dplyr::select(bill_length_mm)    %>% pull(),
x2        = train_set %>% dplyr::select(bill_depth_mm)     %>% pull(),
x3        = train_set %>% dplyr::select(flipper_length_mm) %>% pull()
)
model_definition <- "
data {
int<lower=0>               obs_count;
vector<lower=0>[obs_count] x1;
vector<lower=0>[obs_count] x2;
vector<lower=0>[obs_count] x3;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real          beta2;
real          beta3;
real<lower=0> sigma;
}
model {
beta0 ~ normal(0, 8000);
beta1 ~ normal(0, 100);
beta2 ~ normal(0, 100);
beta3 ~ normal(0, 100);
sigma ~ exponential(0.1);
y ~ normal(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x3, sigma);
}"
bayesion_model <- stan(
model_code = model_definition,
data       = model_variables,
chains     = 5,
iter       = 6000,
warmup     = 1000,
thin       = 1,
seed       = 42
)
traceplot(bayesion_model, pars = params, inc_warmup = TRUE)
lineal_model$coefficients
for(param in params)
print(get_posterior_mean(bayesion_model, par=param))
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
rmse(test_true, bayesion_test_pred)
rmse(test_true, lineal_test_pred)
mae(test_true, bayesion_test_pred)
mae(test_true, lineal_test_pred)
values <- function(df, column) df %>% dplyr::select(!!sym(column)) %>% pull()
colvalues <- function(df, column) df %>% dplyr::select(!!sym(column)) %>% pull()
# install.packages(pacman)
# install.packages("https://cran.r-project.org/src/contrib/rstan_2.21.2.tar.gz",repos = NULL,type="source")
# sudo apt-get install libglpk-dev
library(pacman)
p_load(tidyverse, tidymodels, rsample, rstan, shinystan, rstanarm)
p_load_gh('adrianmarino/commons')
import('../src/dataset.R')
import('../src/plot.R')
import('../src/model.R')
import('../src/bayesian_regression_predictor.R')
# Lectura
dataset <- load_dataset()
# Resumen
dataset %>% glimpse()
show_values(dataset %>% select_if(negate(is.numeric)))
dataset <- dataset %>%
mutate_if(is.character, as.factor)
missings_summary(dataset)
hist_plots(dataset)
box_plots(dataset)
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_depth_mm')
outliers(dataset, column='flipper_length_mm')
outliers(dataset, column='body_mass_g')
outliers(dataset, column='year')
bar_plots(dataset)
dataset <- dataset %>% drop_na()
missings_summary(dataset)
corr_plot(dataset)
segmented_pairs_plot(dataset, segment_column='species')
train_test <- train_test_split(dataset, train_size = 0.7, shuffle = TRUE)
train_set <- train_test[[1]]
test_set  <- train_test[[2]]
lineal_model <- lm(
body_mass_g ~ bill_length_mm + bill_depth_mm + flipper_length_mm,
data = train_set
)
summary(lineal_model)
# coefficients_summary(lineal_model)
# anova_summary(lineal_model)
params = c("beta0","beta1","beta2","beta3","sigma")
vars   = c('bill_length_mm', 'bill_depth_mm', 'flipper_length_mm')
model_definition <- "
data {
int<lower=0>               obs_count;
vector<lower=0>[obs_count] x1;
vector<lower=0>[obs_count] x2;
vector<lower=0>[obs_count] x3;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real          beta2;
real          beta3;
real<lower=0> sigma;
}
model {
beta0 ~ normal(0, 8000);
beta1 ~ normal(0, 100);
beta2 ~ normal(0, 100);
beta3 ~ normal(0, 100);
sigma ~ exponential(0.1);
y ~ normal(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x3, sigma);
}
"
options(mc.cores = 24)
bayesion_model <- stan(
model_code = model_definition,
data = list(
obs_count = nrow(train_set),
y  = colvalues(train_set, 'body_mass_g'),
x1 = colvalues(train_set, 'bill_length_mm'),
x2 = colvalues(train_set, 'bill_depth_mm'),
x3 = colvalues(train_set, 'flipper_length_mm')
),
chains = 5,
iter   = 6000,
warmup = 1000,
thin   = 1,
seed   = 42
)
traceplot(bayesion_model, pars = params, inc_warmup = TRUE)
# launch_shinystan(bayesion_model, rstudio = FALSE)
lineal_model$coefficients
for(param in params)
print(get_posterior_mean(bayesion_model, par=param))
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
rmse(test_true, bayesion_test_pred)
rmse(test_true, lineal_test_pred)
mae(test_true, bayesion_test_pred)
mae(test_true, lineal_test_pred)
data.frame(
model = c('Lineal', 'Bayesian')
rmse = c(
data.frame(
model = c('Lineal', 'Bayesian'),
rmse = c(
rmse(test_true, bayesion_test_pred),
rmse(test_true, lineal_test_pred)
),
mae = c(
mae(test_true, bayesion_test_pred),
mae(test_true, lineal_test_pred)
)
)
import('../src/bayesian_regression_predictor.R')
import('./bayesian_regression_predictor.R')
# ------------------------------------------------------------------------------
# Import dependencies
# ------------------------------------------------------------------------------
library(pacman)
p_load(this.path, tidyverse, tidymodels, compareGroups, MASS, caret, Metrics)
setwd(this.path::this.dir())
p_load_gh('adrianmarino/commons')
#
import('./bayesian_regression_predictor.R')
models_validation <- function(lineal_model, bayesion_model) {
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
data.frame(
model = c('Lineal Regression', 'Bayesian Regression'),
rmse = c(
rmse(test_true, bayesion_test_pred),
rmse(test_true, lineal_test_pred)
),
mae = c(
mae(test_true, bayesion_test_pred),
mae(test_true, lineal_test_pred)
)
)
}
models_validation <- function(lineal_model, bayesion_predictor, params, vars) {
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
data.frame(
model = c('Lineal Regression', 'Bayesian Regression'),
rmse = c(
rmse(test_true, bayesion_test_pred),
rmse(test_true, lineal_test_pred)
),
mae = c(
mae(test_true, bayesion_test_pred),
mae(test_true, lineal_test_pred)
)
)
}
models_validation(lineal_model, bayesion_predictor, params, vars)
models_validation <- function(lineal_model, bayesion_predictor, params, vars) {
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
data.frame(
model = c('Lineal Regression', 'Bayesian Regression'),
rmse = c(
rmse(test_true, bayesion_test_pred),
rmse(test_true, lineal_test_pred)
),
mae = c(
mae(test_true, bayesion_test_pred),
mae(test_true, lineal_test_pred)
)
) %>% arrange(mae)
}
models_validation(lineal_model, bayesion_predictor, params, vars)
lineal_model$coefficients
for(param in params) print(get_posterior_mean(bayesion_model, par=param))
lineal_model$coefficients
print('')
for(param in params) print(get_posterior_mean(bayesion_model, par=param))
print('lineal coeficients:')
lineal_model$coefficients
print('Bayesiona coeficients:')
for(param in params) print(get_posterior_mean(bayesion_model, par=param))
print('Lineal coeficients:')
lineal_model$coefficients
print('Bayesiona coeficients:')
for(param in params) print(get_posterior_mean(bayesion_model, par=param))
gc()
# install.packages(pacman)
# install.packages("https://cran.r-project.org/src/contrib/rstan_2.21.2.tar.gz",repos = NULL,type="source")
# sudo apt-get install libglpk-dev
library(pacman)
p_load(tidyverse, tidymodels, rsample, rstan, shinystan, rstanarm)
p_load_gh('adrianmarino/commons')
import('../src/dataset.R')
import('../src/plot.R')
import('../src/model.R')
# Lectura
dataset <- load_dataset()
# Resumen
dataset %>% glimpse()
show_values(dataset %>% select_if(negate(is.numeric)))
dataset <- dataset %>%
mutate_if(is.character, as.factor)
missings_summary(dataset)
hist_plots(dataset)
box_plots(dataset)
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_depth_mm')
outliers(dataset, column='flipper_length_mm')
outliers(dataset, column='body_mass_g')
outliers(dataset, column='year')
bar_plots(dataset)
dataset <- dataset %>% drop_na()
missings_summary(dataset)
corr_plot(dataset)
segmented_pairs_plot(dataset, segment_column='species')
train_test <- train_test_split(dataset, train_size = 0.7, shuffle = TRUE)
train_set <- train_test[[1]]
test_set  <- train_test[[2]]
lineal_model <- lm(
body_mass_g ~ bill_length_mm + bill_depth_mm + flipper_length_mm,
data = train_set
)
summary(lineal_model)
# coefficients_summary(lineal_model)
# anova_summary(lineal_model)
params <- c("beta0","beta1","beta2","beta3","sigma")
vars   <- c('bill_length_mm', 'bill_depth_mm', 'flipper_length_mm')
model_definition <- "
data {
int<lower=0>               obs_count;
vector<lower=0>[obs_count] x1;
vector<lower=0>[obs_count] x2;
vector<lower=0>[obs_count] x3;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real          beta2;
real          beta3;
real<lower=0> sigma;
}
model {
beta0 ~ normal(0, 8000);
beta1 ~ normal(0, 100);
beta2 ~ normal(0, 100);
beta3 ~ normal(0, 100);
sigma ~ exponential(0.1);
y ~ normal(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x3, sigma);
}
"
options(mc.cores = 24)
bayesion_model <- stan(
model_code = model_definition,
data = list(
obs_count = nrow(train_set),
y  = colvalues(train_set, 'body_mass_g'),
x1 = colvalues(train_set, 'bill_length_mm'),
x2 = colvalues(train_set, 'bill_depth_mm'),
x3 = colvalues(train_set, 'flipper_length_mm')
),
chains = 30,
iter   = 10000,
warmup = 5000,
thin   = 1,
seed   = 42
)
traceplot(bayesion_model, pars = params, inc_warmup = TRUE)
# launch_shinystan(bayesion_model, rstudio = FALSE)
print('Lineal coeficients:')
lineal_model$coefficients
print('Bayesiona coeficients:')
for(param in params) print(get_posterior_mean(bayesion_model, par=param))
models_validation(lineal_model, bayesion_predictor, params, vars)
models_validation(lineal_model, bayesion_predictor, test_set, params, vars)
models_validation <- function(lineal_model, bayesion_predictor, params, vars, test_set) {
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
data.frame(
model = c('Lineal Regression', 'Bayesian Regression'),
rmse = c(
rmse(test_true, bayesion_test_pred),
rmse(test_true, lineal_test_pred)
),
mae = c(
mae(test_true, bayesion_test_pred),
mae(test_true, lineal_test_pred)
)
) %>% arrange(mae)
}
models_validation(lineal_model, bayesion_predictor, params, vars, test_set)
models_validation(lineal_model, bayesion_predictor, params, vars, test_set)
set.seed(42)
set.seed(42)
gc()
set.seed(42)
# install.packages(pacman)
# install.packages("https://cran.r-project.org/src/contrib/rstan_2.21.2.tar.gz",repos = NULL,type="source")
# sudo apt-get install libglpk-dev
library(pacman)
p_load(tidyverse, tidymodels, rsample, rstan, shinystan, rstanarm)
p_load_gh('adrianmarino/commons')
import('../src/dataset.R')
import('../src/plot.R')
import('../src/model.R')
# Lectura
dataset <- load_dataset()
# Resumen
dataset %>% glimpse()
show_values(dataset %>% select_if(negate(is.numeric)))
dataset <- dataset %>%
mutate_if(is.character, as.factor)
missings_summary(dataset)
hist_plots(dataset)
box_plots(dataset)
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_length_mm')
outliers(dataset, column='bill_depth_mm')
outliers(dataset, column='flipper_length_mm')
outliers(dataset, column='body_mass_g')
outliers(dataset, column='year')
bar_plots(dataset)
dataset <- dataset %>% drop_na()
missings_summary(dataset)
corr_plot(dataset)
segmented_pairs_plot(dataset, segment_column='species')
train_test <- train_test_split(dataset, train_size = 0.7, shuffle = TRUE)
train_set <- train_test[[1]]
test_set  <- train_test[[2]]
lineal_model <- lm(
body_mass_g ~ bill_length_mm + bill_depth_mm + flipper_length_mm,
data = train_set
)
summary(lineal_model)
# coefficients_summary(lineal_model)
# anova_summary(lineal_model)
params <- c("beta0","beta1","beta2","beta3","sigma")
vars   <- c('bill_length_mm', 'bill_depth_mm', 'flipper_length_mm')
model_definition <- "
data {
int<lower=0>               obs_count;
vector<lower=0>[obs_count] x1;
vector<lower=0>[obs_count] x2;
vector<lower=0>[obs_count] x3;
vector[obs_count]          y;
}
parameters {
real          beta0;
real          beta1;
real          beta2;
real          beta3;
real<lower=0> sigma;
}
model {
beta0 ~ normal(0, 8000);
beta1 ~ normal(0, 100);
beta2 ~ normal(0, 100);
beta3 ~ normal(0, 100);
sigma ~ exponential(0.1);
y ~ normal(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x3, sigma);
}
"
options(mc.cores = 24)
bayesion_model <- stan(
model_code = model_definition,
data = list(
obs_count = nrow(train_set),
y  = colvalues(train_set, 'body_mass_g'),
x1 = colvalues(train_set, 'bill_length_mm'),
x2 = colvalues(train_set, 'bill_depth_mm'),
x3 = colvalues(train_set, 'flipper_length_mm')
),
chains = 30,
iter   = 10000,
warmup = 5000,
thin   = 1
)
traceplot(bayesion_model, pars = params, inc_warmup = TRUE)
# launch_shinystan(bayesion_model, rstudio = FALSE)
print('Lineal coeficients:')
lineal_model$coefficients
print('Bayesiona coeficients:')
for(param in params) print(get_posterior_mean(bayesion_model, par=param))
models_validation(lineal_model, bayesion_predictor, params, vars, test_set)
models_validation <- function(lineal_model, bayesion_model, params, vars, test_set) {
bayesion_predictor <- BayesianRegressionPredictor.from(bayesion_model, params, vars)
bayesion_test_pred <- predict(bayesion_predictor, test_set)
lineal_test_pred   <- predict(lineal_model, test_set)
test_true <- test_set %>% dplyr::select(body_mass_g) %>% pull()
data.frame(
model = c('Lineal Regression', 'Bayesian Regression'),
rmse = c(
rmse(test_true, bayesion_test_pred),
rmse(test_true, lineal_test_pred)
),
mae = c(
mae(test_true, bayesion_test_pred),
mae(test_true, lineal_test_pred)
)
) %>% arrange(mae)
}
gc()
gc()
